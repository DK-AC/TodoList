{"version":3,"sources":["ui/Login/Login.module.css","components/AddItemForm/AddItemForm.module.css","serviceWorker.ts","bll/reducers/appReducer.ts","utils/error-utils.ts","dal/api/authApi.ts","dal/api/tasks-api.ts","dal/api/todolists-api.ts","bll/thunk/authThunk.ts","bll/reducers/authReducer.ts","bll/thunk/taskThunk.ts","bll/reducers/todolistsReducer.ts","bll/thunk/todolistThunk.ts","bll/reducers/tasksReducer.ts","bll/reducers/index.ts","bll/store.ts","utils/redux-utils.ts","bll/selectors/selectors.ts","bll/selectors/index.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/AddItemForm/AddItemForm.tsx","bll/thunk/index.ts","components/EditableSpan/EditableSpan.tsx","ui/Task/Task.tsx","ui/TodolistList/Todolist/Todolist.tsx","ui/TodolistList/TodolistsList.tsx","ui/Login/Login.tsx","ui/App/AppBarContainer.tsx","ui/App/App.tsx","index.tsx","ui/TodolistList/TodolistsList.module.css","ui/App/AppBarContainer.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","appSlices","createSlice","name","initialState","appStatus","error","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","actions","handleAsyncServerAppError","data","thunkAPI","showError","dispatch","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncNetworkError","message","undefined","instance","axios","create","baseURL","withCredentials","headers","authApi","post","get","delete","tasksApi","todolistId","title","taskId","model","put","todolistsApi","login","createAsyncThunk","a","res","resultCode","isAuth","setIsLoggedInAC","isLoggedIn","logout","authSlices","isInitialized","extraReducers","builder","addCase","fulfilled","fetchTasks","tasks","items","addTask","item","removeTask","updateTask","getState","task","find","id","apiModel","deadline","description","priority","startDate","status","todolistSlices","changeTodolistFilterAC","index","findIndex","todo","filter","changeTodolistStatusAC","addTodolist","unshift","todolist","fetchTodolists","todolists","map","removeTodolist","splice","updateTodolistTitle","taskSlices","todoListId","forEach","appReducer","reducer","authReducer","tasksReducer","todolistsReducer","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","selectError","selectStatus","selectIsInitialized","selectIsLoggedIn","selectTodolists","Alert","React","props","ref","elevation","variant","ErrorSnackbar","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","AddItemForm","memo","callback","disabled","useState","setTitle","setError","addItem","trim","className","style","row","TextField","value","onChange","e","currentTarget","onKeyPress","key","size","label","helperText","IconButton","color","onClick","marginLeft","AddBox","todolistsActions","todolistsAsyncActions","authActions","authAsyncActions","EditableSpan","editMode","setEditMode","titleValue","setTitleValue","autoFocus","onBlur","onDoubleClick","Task","tasksActions","position","Checkbox","checked","top","right","Delete","fontSize","Todolist","demo","useEffect","addTaskHandle","useCallback","helper","rejected","changeTodolistFilterHandle","tasksForTodolist","renderFilterButton","text","buttonFilter","Button","Paper","padding","paddingTop","TodolistsList","navigate","useNavigate","addTodolistHandle","Grid","addForm","container","tl","allTodolistTasks","xs","Login","formik","useFormik","initialValues","email","password","rememberMe","validationSchema","Yup","required","min","onSubmit","values","formikHelpers","setFieldError","field","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","formControl","margin","getFieldProps","type","FormControlLabel","control","AppBarContainer","handleLogOut","AppBar","Toolbar","header","LinearProgress","Container","path","element","circular","CircularProgress","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e94cf0d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__z56N1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"AddItemForm_row__2Ix4S\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the App load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web App is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different App. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {StatusType} from \"../../dal/api/types\";\r\n\r\nexport const initialAppState = {\r\n    appStatus: 'idle' as StatusType,\r\n    error: null as null | string,\r\n}\r\n\r\nexport const appSlices = createSlice({\r\n    name: 'app',\r\n    initialState: initialAppState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ appStatus: StatusType }>) {\r\n            state.appStatus = action.payload.appStatus\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        }\r\n    }\r\n})\r\n\r\nexport const {setAppStatusAC, setAppErrorAC} = appSlices.actions\r\n\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from \"../bll/reducers/appReducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {ResponseType} from \"../dal/api/types\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = (data: ResponseType, thunkAPI: ThunkAPIType, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppErrorAC({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatusAC({appStatus: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\nexport const handleAsyncNetworkError = (error: AxiosError, thunkAPI: ThunkAPIType, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatusAC({appStatus: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}","import axios, {AxiosResponse} from \"axios\";\r\nimport {LoginValuesType, ResponseType, UserInfoType} from \"./types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a32b35ae-c578-47f3-b8a9-0885cd248a9d'\r\n    }\r\n})\r\n\r\nexport const authApi = {\r\n    logIn(data: LoginValuesType) {\r\n        return instance.post <LoginValuesType, AxiosResponse<ResponseType<{ userId?: number }>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<UserInfoType>>(`/auth/me`)\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>(`/auth/login`)\r\n    }\r\n}","import axios, {AxiosResponse} from \"axios\";\r\nimport {ModelTaskType, ResponseType, TaskResponseType, TaskType} from \"./types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a32b35ae-c578-47f3-b8a9-0885cd248a9d'\r\n    }\r\n})\r\n\r\nexport const tasksApi = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TaskResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<AxiosResponse<ResponseType>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: ModelTaskType) {\r\n        return instance.put<ModelTaskType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {RepeatTodoType, ResponseType, TodolistType} from \"./types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a32b35ae-c578-47f3-b8a9-0885cd248a9d'\r\n    }\r\n});\r\n\r\nexport const todolistsApi = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete <ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<RepeatTodoType>, { title: string }>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n","import {setIsLoggedInAC} from \"../reducers/authReducer\";\r\nimport {setAppStatusAC} from \"../reducers/appReducer\";\r\nimport {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {handleAsyncNetworkError, handleAsyncServerAppError} from \"../../utils/error-utils\";\r\nimport { authApi } from \"../../dal/api\";\r\nimport { LoginValuesType } from \"../../dal/api/types\";\r\nimport {ThunkErrorType} from \"../../utils/types\";\r\n\r\nexport const login = createAsyncThunk<undefined, LoginValuesType, ThunkErrorType>('auth/login',\r\n    async (payload, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        try {\r\n            const res = await authApi.logIn(payload)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n                return\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (err: any) {\r\n            return handleAsyncNetworkError(err, thunkAPI)\r\n        }\r\n    })\r\nexport const isAuth = createAsyncThunk('auth/isAuth',\r\n    async (payload, thunkAPI) => {\r\n        const res = await authApi.me()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setIsLoggedInAC({isLoggedIn: true}))\r\n        } else {\r\n        }\r\n    })\r\nexport const logout = createAsyncThunk('auth/logout',\r\n    async (payload, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        try {\r\n            const res = await authApi.logOut()\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n                return\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (err: any) {\r\n            return handleAsyncNetworkError(err, thunkAPI)\r\n        }\r\n    })\r\n\r\n\r\n\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {isAuth, login, logout} from \"../thunk/authThunk\";\r\n\r\nexport const initialAuthState = {\r\n    isInitialized: false,\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authSlices = createSlice({\r\n    name: 'auth',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n            .addCase(isAuth.fulfilled, (state) => {\r\n                state.isInitialized = true\r\n            })\r\n    }\r\n})\r\n\r\nexport const {setIsLoggedInAC} = authSlices.actions\r\n\r\n","import {tasksApi} from \"../../dal/api/\";\r\nimport {handleAsyncNetworkError, handleAsyncServerAppError,} from \"../../utils/error-utils\";\r\nimport {setAppStatusAC} from \"../reducers/appReducer\";\r\nimport {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {ModelTaskType, TaskType} from \"../../dal/api/types\";\r\nimport {AppRootStateType, ThunkErrorType} from \"../../utils/types\";\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkErrorType>('tasks/fetchTasks',\r\n    async (todolistId, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        try {\r\n            const res = await tasksApi.getTasks(todolistId)\r\n            thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n            return {todolistId, tasks: res.data.items}\r\n        } catch (err: any) {\r\n            return handleAsyncNetworkError(err, thunkAPI)\r\n        }\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { todolistId: string, title: string }, ThunkErrorType>('tasks/addTask',\r\n    async (payload, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        try {\r\n            const res = await tasksApi.createTask(payload.todolistId, payload.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n                return res.data.data.item\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n            }\r\n        } catch (err: any) {\r\n            return handleAsyncNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkErrorType>('tasks/removeTask',\r\n    async (payload, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        await tasksApi.deleteTask(payload.todolistId, payload.taskId)\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n        return payload\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask',\r\n    async (payload: { todolistId: string, taskId: string, model: Partial<ModelTaskType> },\r\n           thunkAPI) => {\r\n\r\n        let state = thunkAPI.getState() as AppRootStateType\r\n\r\n        const task = state.tasks[payload.todolistId].find(task => task.id === payload.taskId)\r\n        if (!task) {\r\n            return thunkAPI.rejectWithValue('task not found in the state')\r\n        }\r\n\r\n        const apiModel: ModelTaskType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...payload.model\r\n        }\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        try {\r\n            const res = await tasksApi.updateTask(payload.todolistId, payload.taskId, apiModel)\r\n\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n                return payload\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (err: any) {\r\n            return handleAsyncNetworkError(err, thunkAPI)\r\n        }\r\n    })\r\n\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolist, fetchTodolists, removeTodolist, updateTodolistTitle} from \"../thunk/todolistThunk\";\r\nimport {FilterTodolistType, StatusType, TodolistType} from \"../../dal/api/types\";\r\n\r\nexport const initialTodolistsState: TodolistType[] = []\r\n\r\nexport const todolistSlices = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialTodolistsState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ todolistId: string, filter: FilterTodolistType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.todolistId)\r\n            if (index !== -1) state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistStatusAC(state, action: PayloadAction<{ todolistId: string, status: StatusType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.todolistId)\r\n            if (index !== -1) state[index].status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', status: 'idle'})\r\n        })\r\n            .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(todo => ({...todo, filter: 'all', status: 'idle'}))\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const index = state.findIndex(todo => todo.id === action.payload.todolistId)\r\n                if (index !== -1) state.splice(index, 1)\r\n            })\r\n            .addCase(updateTodolistTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(todo => todo.id === action.payload.todolistId)\r\n                if (index !== -1) state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilterAC, changeTodolistStatusAC,} = todolistSlices.actions\r\n\r\n","import {todolistsApi} from \"../../dal/api/\";\r\nimport {handleAsyncNetworkError, handleAsyncServerAppError} from \"../../utils/error-utils\";\r\nimport {setAppStatusAC} from \"../reducers/appReducer\";\r\nimport {changeTodolistStatusAC} from \"../reducers/todolistsReducer\";\r\nimport {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {TodolistType} from \"../../dal/api/types\";\r\nimport {ThunkErrorType} from \"../../utils/types\";\r\n\r\nexport const fetchTodolists = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkErrorType>('todolists/fetchTodolists',\r\n    async (payload, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        try {\r\n            const res = await todolistsApi.getTodolists()\r\n            thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n            return {todolists: res.data}\r\n        } catch (err: any) {\r\n            return handleAsyncNetworkError(err, thunkAPI)\r\n        }\r\n    })\r\nexport const addTodolist = createAsyncThunk<{ todolist: TodolistType }, string, ThunkErrorType>('todolists/addTodolist',\r\n    async (title, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        try {\r\n            const res = await todolistsApi.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n                return {todolist: res.data.data.item}\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI, true)\r\n            }\r\n        } catch (err: any) {\r\n            return handleAsyncNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\nexport const removeTodolist = createAsyncThunk<{ todolistId: string }, string, ThunkErrorType>('todolists/removeTodolist', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n    thunkAPI.dispatch(changeTodolistStatusAC({todolistId, status: \"loading\"}))\r\n    await todolistsApi.deleteTodolist(todolistId)\r\n    thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n    return {todolistId}\r\n})\r\nexport const updateTodolistTitle = createAsyncThunk('todolists/updateTodolistTitle',\r\n    async (payload: { todolistId: string, title: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({appStatus: \"loading\"}))\r\n        try {\r\n            const res = await todolistsApi.updateTodolist(payload.todolistId, payload.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({appStatus: \"succeeded\"}))\r\n                return {todolistId: payload.todolistId, title: payload.title}\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (err: any) {\r\n            return handleAsyncNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\n\r\n","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {addTask, fetchTasks, removeTask, updateTask} from \"../thunk/taskThunk\";\r\nimport {addTodolist, fetchTodolists} from \"../thunk/todolistThunk\";\r\nimport {TasksStateType, TodolistType} from \"../../dal/api/types\";\r\n\r\nconst initialTasksState: TasksStateType = {}\r\n\r\nexport const taskSlices = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialTasksState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const index = state[action.payload.todolistId].findIndex(task => task.id === action.payload.taskId)\r\n                if (index !== -1) state[action.payload.todolistId].splice(index, 1)\r\n            })\r\n            .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((todo: TodolistType) => state[todo.id] = [])\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                let task = state[action.payload.todolistId]\r\n                const index = task.findIndex(task => task.id === action.payload.taskId)\r\n                if (index !== -1) task[index] = {...task[index], ...action.payload.model}\r\n            })\r\n            .addCase(addTodolist.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n    },\r\n})\r\n\r\n","import {appSlices} from \"./appReducer\"\r\nimport {authSlices} from \"./authReducer\"\r\nimport {taskSlices} from \"./tasksReducer\"\r\nimport {todolistSlices} from \"./todolistsReducer\"\r\n\r\nconst appReducer = appSlices.reducer\r\nconst authReducer = authSlices.reducer\r\nconst tasksReducer = taskSlices.reducer\r\nconst todolistsReducer = todolistSlices.reducer\r\n\r\nexport {appReducer, authReducer, todolistsReducer, tasksReducer}\r\n\r\n","import {combineReducers} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {appReducer, authReducer, tasksReducer, todolistsReducer} from \"./reducers\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n//hot reload\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer)\r\n    )\r\n}\r\n\r\n//08.04.2022 added sagas on todolists in branch saga_without_toolkit\r\n// write tests for sagas\r\n\r\n\r\n","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject>(actions: T) {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const action = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch);\r\n    }, []);\r\n\r\n    return action;\r\n}","import {AppRootStateType} from \"../../utils/types\";\r\n\r\n//app\r\nexport const selectStatus = (state: AppRootStateType) => state.app.appStatus\r\nexport const selectError = (state: AppRootStateType) => state.app.error\r\n\r\n//auth\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.auth.isInitialized\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n\r\n//todolist\r\nexport const selectTodolists = (state: AppRootStateType) => state.todolists\r\n\r\n\r\n\r\n\r\n\r\n","import * as selectors from './selectors'\r\n\r\nconst {selectError, selectStatus, selectIsInitialized, selectIsLoggedIn, selectTodolists} = selectors\r\n\r\nexport {selectIsInitialized, selectStatus, selectError, selectIsLoggedIn, selectTodolists}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {setAppErrorAC} from \"../../bll/reducers/appReducer\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectError} from \"../../bll/selectors\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref,) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const error = useSelector(selectError)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport style from './AddItemForm.module.css'\r\n\r\nexport type AddItemFormHelperType = {\r\n    setTitle: (title: string) => void\r\n    setError: (error: string) => void\r\n}\r\n\r\ntype AddItemFormPropsType = {\r\n    callback: (title: string, helper: AddItemFormHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({\r\n                                           callback,\r\n                                           disabled = false\r\n                                       }: AddItemFormPropsType) => {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            callback(title, {setTitle, setError})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeValueTasks = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.currentTarget.value\r\n\r\n        if (value.length >= 0) {\r\n            setTitle(value)\r\n            setError(null)\r\n        }\r\n    }\r\n    const onKeyPressTasks = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.row}>\r\n            <TextField variant={\"outlined\"}\r\n                       value={title}\r\n                       onChange={onChangeValueTasks}\r\n                       onKeyPress={onKeyPressTasks}\r\n                       size={\"small\"}\r\n                       error={!!error}\r\n                       label='Title'\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addItem} size={\"small\"}\r\n                        disabled={disabled}\r\n                        style={{marginLeft: '5px'}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import * as tasksActions from './taskThunk'\r\nimport * as todolistsAsyncActions from './todolistThunk'\r\nimport * as authAsyncActions from './authThunk'\r\nimport {todolistSlices} from \"../reducers/todolistsReducer\";\r\nimport {authSlices} from \"../reducers/authReducer\";\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistSlices.actions\r\n}\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    ...authSlices.actions\r\n}\r\n\r\nexport {tasksActions, todolistsActions, authActions}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, onChange, disabled = false}: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [titleValue, setTitleValue] = useState(title)\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitleValue(titleValue)\r\n    }\r\n    const activeViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(titleValue)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleValue(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={titleValue}\r\n                 onChange={changeTitle}\r\n                 autoFocus={true}\r\n                 onBlur={activeViewMode}\r\n                 disabled={disabled}\r\n        />\r\n        : <span onDoubleClick={activeEditMode}>{titleValue}</span>\r\n\r\n})","import React, {ChangeEvent} from 'react';\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {tasksActions} from \"../../bll/thunk\";\r\nimport {TaskType} from \"../../dal/api/types\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\n\r\ntype TaskPropsType = { todolistId: string, task: TaskType }\r\n\r\nexport const Task = React.memo(({todolistId, task}: TaskPropsType) => {\r\n\r\n    const {removeTask, updateTask} = useActions(tasksActions)\r\n\r\n    const removeTaskHandle = () => {\r\n        removeTask({todolistId, taskId: task.id})\r\n    }\r\n    const onChangeTaskTitle = (title: string) => {\r\n        updateTask({todolistId, taskId: task.id, model: {title}})\r\n    }\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            todolistId,\r\n            taskId: task.id,\r\n            model: {status: e.currentTarget.checked ? 1 : 0}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div key={task.id} style={{position: 'relative'}}>\r\n            <Checkbox\r\n                color=\"primary\"\r\n                checked={task.status !== 0}\r\n                onChange={onChangeTaskStatus}\r\n                size={\"small\"}\r\n            />\r\n            <EditableSpan title={task.title} onChange={onChangeTaskTitle}/>\r\n            <IconButton onClick={removeTaskHandle}\r\n                        size={'small'}\r\n                        style={{position: 'absolute', top: '2px', right: '-5px'}}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Task} from \"../../Task/Task\";\r\nimport {AddItemForm, AddItemFormHelperType} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {tasksActions, todolistsActions} from \"../../../bll/thunk\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {ButtonColorType, FilterTodolistType, TaskType, TodolistType} from \"../../../dal/api/types\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../utils/types\";\r\n\r\ntype PropsType = { todo: TodolistType, demo?: boolean, tasks: TaskType[] }\r\n\r\nexport const Todolist = React.memo(({todo, demo = false}: PropsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {updateTodolistTitle, removeTodolist, changeTodolistFilterAC} = useActions(todolistsActions)\r\n    const {fetchTasks} = useActions(tasksActions)\r\n\r\n    let tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[todo.id])\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        if (!tasks.length) {\r\n            fetchTasks(todo.id)\r\n        }\r\n    }, [])\r\n\r\n    const removeTodolistHandle = () => {\r\n        removeTodolist(todo.id)\r\n    }\r\n    const changeTodolistTitleHandle = (title: string) => {\r\n        updateTodolistTitle({todolistId: todo.id, title})\r\n    }\r\n    const addTaskHandle = useCallback(async (title: string, helper: AddItemFormHelperType) => {\r\n        let thunk = tasksActions.addTask({todolistId: todo.id, title})\r\n\r\n        const action = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(action)) {\r\n            if (action.payload?.errors?.length) {\r\n                const error = action.payload.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n    const changeTodolistFilterHandle = (filter: FilterTodolistType) => {\r\n        changeTodolistFilterAC({todolistId: todo.id, filter})\r\n    }\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todo.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(task => !task.status)\r\n    }\r\n    if (todo.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(task => task.status)\r\n    }\r\n\r\n    const renderFilterButton = (onClick: (filter: FilterTodolistType) => void, text: string, buttonFilter: FilterTodolistType, color: ButtonColorType) => {\r\n        return (\r\n            <Button variant={todo.filter === buttonFilter ? 'outlined' : 'text'}\r\n                    onClick={() => changeTodolistFilterHandle(buttonFilter)}\r\n                    color={color}\r\n            >\r\n                {text}\r\n            </Button>)\r\n    }\r\n\r\n\r\n    return (\r\n        <Paper style={{padding: '10px', position: 'relative'}}>\r\n            <IconButton onClick={removeTodolistHandle}\r\n                        disabled={todo.status === 'loading'}\r\n                        size={'small'}\r\n                        style={{position: 'absolute', top: '5x', right: '5px'}}\r\n            >\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n            <h3>\r\n                <EditableSpan title={todo.title} onChange={changeTodolistTitleHandle}/>\r\n\r\n            </h3>\r\n            <div>\r\n                <AddItemForm callback={addTaskHandle} disabled={todo.status === 'loading'}/>\r\n                {tasksForTodolist.map(task => {\r\n                    return <Task key={todo.id + task.id} todolistId={todo.id} task={task}/>\r\n                })}\r\n\r\n                {!tasksForTodolist.length && <div style={{padding: '10px', color: \"gray\"}}>No task</div>}\r\n\r\n            </div>\r\n            <div style={{paddingTop: '10px'}}>\r\n                {renderFilterButton(changeTodolistFilterHandle, 'all', 'all', 'inherit')}\r\n                {renderFilterButton(changeTodolistFilterHandle, 'active', 'active', 'primary')}\r\n                {renderFilterButton(changeTodolistFilterHandle, 'completed', 'completed', 'secondary')}\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {\r\n    AddItemForm,\r\n    AddItemFormHelperType\r\n} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {todolistsActions} from \"../../bll/thunk\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectIsLoggedIn, selectTodolists} from \"../../bll/selectors\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {TasksStateType} from \"../../dal/api/types\";\r\nimport style from './TodolistsList.module.css'\r\n\r\ntype PropsType = { demo?: boolean }\r\n\r\nexport const TodolistsList = ({demo}: PropsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const {fetchTodolists} = useActions(todolistsActions)\r\n\r\n    const todolists = useSelector(selectTodolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const addTodolistHandle = useCallback(async (title: string, helper: AddItemFormHelperType) => {\r\n        let thunk = todolistsActions.addTodolist(title)\r\n\r\n        const action = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolist.rejected.match(action)) {\r\n            if (action.payload?.errors?.length) {\r\n                const error = action.payload.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        if (!todolists.length) {\r\n            fetchTodolists()\r\n        }\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        navigate('/login')\r\n    }\r\n\r\n\r\n    return (<>\r\n            <Grid className={style.addForm}>\r\n                <AddItemForm callback={addTodolistHandle}/>\r\n            </Grid>\r\n            <Grid className={style.container}>\r\n                {todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    return (\r\n                        <Grid item xs=\"auto\" key={tl.id}>\r\n                            <div className={style.todolist}>\r\n                                <Todolist todo={tl} demo={demo} tasks={allTodolistTasks}/>\r\n                            </div>\r\n                        </Grid>)\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import Button from \"@mui/material/Button\"\r\nimport Checkbox from \"@mui/material/Checkbox\"\r\nimport FormControl from \"@mui/material/FormControl\"\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\"\r\nimport FormGroup from \"@mui/material/FormGroup\"\r\nimport FormLabel from \"@mui/material/FormLabel\"\r\nimport Grid from \"@mui/material/Grid\"\r\nimport TextField from \"@mui/material/TextField\"\r\nimport React, {useEffect} from \"react\"\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport * as Yup from 'yup';\r\nimport {authActions} from \"../../bll/thunk\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectIsLoggedIn} from \"../../bll/selectors\";\r\nimport style from './Login.module.css'\r\n\r\ntype FormValuesType = { email: string, password: string, rememberMe: boolean }\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const {login} = useActions(authActions)\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string().email('Invalid email address').required('Required'),\r\n            password: Yup.string()\r\n                .min(8, 'Password must be at least 8 characters')\r\n                .required('Required'),\r\n        }),\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(login(values))\r\n\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            navigate('/')\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n\r\n    return <Grid className={style.login} container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup className={style.formControl}>\r\n                        <TextField label=\"email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        <FormControlLabel\r\n                            label={'remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport Button from \"@mui/material/Button\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Container from \"@mui/material/Container\";\r\nimport {ErrorSnackbar} from \"../../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {TodolistsList} from \"../TodolistList/TodolistsList\";\r\nimport {Login} from \"../Login/Login\";\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport style from './AppBarContainer.module.css'\r\nimport {selectIsInitialized, selectIsLoggedIn, selectStatus} from \"../../bll/selectors\";\r\nimport {authActions} from \"../../bll/thunk\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Toolbar} from \"@mui/material\";\r\n\r\n\r\nexport const AppBarContainer = () => {\r\n\r\n    const {logout, isAuth} = useActions(authActions)\r\n\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n            isAuth()\r\n        }\r\n    }, [])\r\n\r\n    const handleLogOut = useCallback(() => {\r\n        logout()\r\n    }, [isInitialized])\r\n\r\n    if (!isInitialized) {\r\n        return <div className={style.circular}><CircularProgress/></div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar className={style.header}>\r\n                    <div className={style.title}>Todolist</div>\r\n                    {isLoggedIn &&\r\n                        <div>\r\n                            <Button variant={\"outlined\"}\r\n                                    color=\"inherit\" onClick={handleLogOut}>\r\n                                Log Out\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container>\r\n                {!isLoggedIn ? <Login/> :\r\n                    <Routes>\r\n                        <Route path='/' element={<TodolistsList demo={false}/>}/>\r\n                        <Route path='/login' element={<Login/>}/>\r\n                    </Routes>}\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {AppBarContainer} from './AppBarContainer';\r\n\r\n\r\nexport const App = () => <AppBarContainer/>\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\nimport {App} from \"./ui/App/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n        , document.getElementById('root'));\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\n\r\n// If you want your App to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./ui/App/App', () => rerenderEntireTree())\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TodolistsList_container__1khrx\",\"addForm\":\"TodolistsList_addForm__2bMCh\",\"todolist\":\"TodolistsList_todolist__3skP9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"circular\":\"AppBarContainer_circular__Q-wa0\",\"header\":\"AppBarContainer_header__s4-ws\",\"title\":\"AppBarContainer_title__2VTnq\"};"],"sourceRoot":""}